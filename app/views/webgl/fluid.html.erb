<html>
<body>
<head>
    <link rel="stylesheet" type="text/css" href="/fluid/smoke.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

    <script id="DiffusionShader" type="shader-code"> 
        uniform vec2 res;//The width and height of our screen
        uniform sampler2D x;//Our input texture
        uniform sampler2D b;
        uniform float alpha;
        uniform float rBeta;


        void main() {
            float xPixel = 1.0/res.x;
            float yPixel = 1.0/res.y;
            vec2 pixel = gl_FragCoord.xy / res.xy;
            gl_FragColor = texture2D( b, pixel );
            
            vec4 leftColor = vec4(0,0,0,0);
            vec4 rightColor = vec4(0,0,0,0);
            vec4 upColor = vec4(0,0,0,0);
            vec4 downColor = vec4(0,0,0,0);

           
            float N = res.x * res.y;
           

              
                leftColor = texture2D(x,vec2(pixel.x-xPixel,pixel.y));
            
                rightColor = texture2D(x,vec2(pixel.x+xPixel,pixel.y));
          
         
              
                downColor = texture2D(x,vec2(pixel.x,pixel.y-yPixel));
           
                
                upColor = texture2D(x,vec2(pixel.x,pixel.y+yPixel));


            //Diffuse equation
            gl_FragColor.r = (gl_FragColor.r * alpha +leftColor.r   + rightColor.r + upColor.r + downColor.r) * rBeta;
            gl_FragColor.g = (gl_FragColor.g * alpha +leftColor.g   + rightColor.g + upColor.g + downColor.g)* rBeta;
            gl_FragColor.b = (gl_FragColor.b * alpha +leftColor.b   + rightColor.b + upColor.b + downColor.b)* rBeta;

            
            
        }
    </script>
    
    <script id="DisplayVelocityShader" type="shader-code">
        uniform vec2 res;//The width and height of our screen
        uniform sampler2D bufferTexture;//Our input texture


        void main() {
            vec2 pixel = gl_FragCoord.xy / res.xy;
            gl_FragColor = texture2D( bufferTexture, pixel );
            
               
            float mag = length(gl_FragColor.xyz);

            gl_FragColor = vec4(mag/6.0, mag/4.0, 0.0, 0.0);

            
            

        }
    </script>
    <script id="AddVelocityShader" type="shader-code">
        uniform vec2 res;//The width and height of our screen
        uniform sampler2D bufferTexture;//Our input texture
        uniform vec4 velocitySource;

        void main() {
            vec2 pixel = gl_FragCoord.xy / res.xy;
            gl_FragColor = texture2D( bufferTexture, pixel );
            
            
                
            float dist = distance(velocitySource.zw,gl_FragCoord.xy);
            if(dist<50.0){
               
                gl_FragColor.r += velocitySource.x; 
                gl_FragColor.g += velocitySource.y;     
                    
            }
           

            
            

        }
    </script>
    <script id="AdvectionShader" type="shader-code">
        uniform vec2 res;//The width and height of our screen
        uniform sampler2D velocity;//input velocity
        uniform sampler2D quantity;//quantity to advect
        uniform float dx;
        uniform float dt;

        void main() {
                vec2 pixel = gl_FragCoord.xy / res.xy;

                float i0, j0, i1, j1;
                float x, y, s0, s1, t0, t1, dxt0, dyt0;
                float dt = 1.0/60.0;
                float Nx = res.x -1.0;
                float Ny = res.y -1.0;
                float i = pixel.x;
                float j = pixel.y;
                
                dxt0 = 1.0 ;
                dyt0 = 1.0 ;
                x = gl_FragCoord.x - dxt0 * (texture2D(velocity, pixel).x );
                y = gl_FragCoord.y - dyt0 * (texture2D(velocity, pixel).y );
                
                i0=x-0.5; 
                i1=x+0.5;

                j0=y-0.5; 
                j1=y+0.5;


                s1 = x-i0; 
                s0 = 1.0-s1; 
                t1 = y-j0; 
                t0 = 1.0-t1;


                float p1 =  (t0 * texture2D(quantity, vec2(i0,j0)/res.xy).r);
                float p2 =  (t1 * texture2D(quantity, vec2(i0,j1)/res.xy).r);
                float p3 =  (t0 * texture2D(quantity, vec2(i1,j0)/res.xy).r);
                float p4 =  (t1 * texture2D(quantity, vec2(i1,j1)/res.xy).r);
                float total1 = s0 * (p1 + p2);
                float total2 = s1 * (p3 + p4);
                gl_FragColor.r = total1 + total2;

                p1 =  (t0 * texture2D(quantity, vec2(i0,j0)/res.xy).g);
                p2 =  (t1 * texture2D(quantity, vec2(i0,j1)/res.xy).g);
                p3 =  (t0 * texture2D(quantity, vec2(i1,j0)/res.xy).g);
                p4 =  (t1 * texture2D(quantity, vec2(i1,j1)/res.xy).g);
                total1 = s0 * (p1 + p2);
                total2 = s1 * (p3 + p4);
                gl_FragColor.g = total1 + total2;



            
             

            
            
            

        }
    </script>
    <script src = "/fluid/three.js"></script>
    <script src = "/fluid/scene.js"></script>

</head>

    




</body>
</html>
