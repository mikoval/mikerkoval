<html>
<body style="margin:0px;">


<script src="/lib/underscore.js"></script>
<script src="/lib/ShaderLoader.js"></script>

<script src="/lib/PhysicsRenderer.js"></script>


<script>
  

  var scene , camera , renderer, clock  ;

  var SIZE = 64;
  var simulationR;
  var simulationG;
  var simulationB;
  var mouseX = 1000;
  var mouseY = 1000;
  var simulationUniformsR = {
  
    dT:{ type:"f" , value: 0 },
    centerPos: { type:"v3" , value: new THREE.Vector3() },


  }
  var simulationUniformsG = {
  
    dT:{ type:"f" , value: 0 },
    centerPos: { type:"v3" , value: new THREE.Vector3() },


  }

   var simulationUniformsB = {
  
    dT:{ type:"f" , value: 0 },
    centerPos: { type:"v3" , value: new THREE.Vector3() },


  }
  var renderUniformsR = {

    t_pos:{ type:"t" , value: null }

  }
  var renderUniformsG = {

    t_pos:{ type:"t" , value: null }

  }
  var renderUniformsB = {

    t_pos:{ type:"t" , value: null }

  }



  var shaders = new ShaderLoader( '../shaders' );

  shaders.load( 'ss-grid'    , 'sim'    , 'simulation' );
  shaders.load( 'vs-lookup'  , 'lookup' , 'vertex'     );
  shaders.load( 'fs-lookupR'  , 'lookupR' , 'fragment'   );
  shaders.load( 'fs-lookupG'  , 'lookupG' , 'fragment'   );
  shaders.load( 'fs-lookupB'  , 'lookupB' , 'fragment'   );
  shaders.shaderSetLoaded = function(){

    init();
    animate();

  }


  
  function init(){
    console.log("test")
      /*

         Default threejs stuff!

      */
      scene = new THREE.Scene();

      var ar = window.innerWidth / window.innerHeight;

      camera = new THREE.PerspectiveCamera( 75, ar , 1, 1000 );
      camera.position.z = 100;

      renderer = new THREE.WebGLRenderer();
      renderer.setSize( window.innerWidth, window.innerHeight );

      document.body.appendChild( renderer.domElement );


     
      clock = new THREE.Clock();


      simulationR = new PhysicsRenderer( SIZE , shaders.ss.sim , renderer );
      simulationR.setUniforms( simulationUniformsR );
      simulationG = new PhysicsRenderer( SIZE , shaders.ss.sim , renderer );
      simulationG.setUniforms( simulationUniformsG );
      simulationB = new PhysicsRenderer( SIZE , shaders.ss.sim , renderer );
      simulationB.setUniforms( simulationUniformsB );
      // RED
      var geoR = createLookupGeometry( SIZE );
      var geoG = createLookupGeometry( SIZE );
      var geoB = createLookupGeometry( SIZE );

      var matR = new THREE.ShaderMaterial({
        uniforms: renderUniformsR,
        vertexShader: shaders.vs.lookup,
        fragmentShader: shaders.fs.lookupR,

      });


      var particlesR = new THREE.PointCloud( geoR , matR );
      particlesR.frustumCulled = false;

      scene.add( particlesR );

      //Green

      var matG = new THREE.ShaderMaterial({
        uniforms: renderUniformsG,
        vertexShader: shaders.vs.lookup,
        fragmentShader: shaders.fs.lookupG,

      });


      var particlesG = new THREE.PointCloud( geoR , matG );
      particlesG.frustumCulled = false;

      scene.add( particlesG );
      //blue
      //Green

      var matB = new THREE.ShaderMaterial({
        uniforms: renderUniformsB,
        vertexShader: shaders.vs.lookup,
        fragmentShader: shaders.fs.lookupB,

      });


      var particlesB = new THREE.PointCloud( geoR , matB );
      particlesB.frustumCulled = false;

      scene.add( particlesB );
      ///////

      simulationR.addBoundTexture( renderUniformsR.t_pos , 'output' );
      simulationG.addBoundTexture( renderUniformsG.t_pos , 'output' );
      simulationB.addBoundTexture( renderUniformsB.t_pos , 'output' );
      simulationR.resetRand(0, 5 );
      simulationG.resetRand(0, 10 );
      simulationB.resetRand(0, 20 );
      window.addEventListener("mousemove", onMouseMove, false);
  }

  function animate(){

    requestAnimationFrame( animate );
    delta = clock.getDelta();

    simulationUniformsR.dT.value = delta;
    simulationUniformsR.centerPos.value = new  THREE.Vector3(mouseX, mouseY, 0.0);
    simulationR.update();

    simulationUniformsG.dT.value = delta;
    simulationUniformsG.centerPos.value = new  THREE.Vector3(mouseX, mouseY, 0.0);
    simulationG.update();

    simulationUniformsB.dT.value = delta;
    simulationUniformsB.centerPos.value = new  THREE.Vector3(mouseX, mouseY, 0.0);
    simulationB.update();

    
    renderer.render( scene , camera );

  }


  function createLookupGeometry( size ){        
        
    var geo = new THREE.BufferGeometry();
    var positions = new Float32Array(  size * size * 3 );

    for ( var i = 0, j = 0, l = positions.length / 3; i < l; i ++, j += 3 ) {

      positions[ j     ] = ( i % size ) / size;
      positions[ j + 1 ] = Math.floor( i / size ) / size;
    
    }

    var posA = new THREE.BufferAttribute( positions , 3 );
    geo.addAttribute( 'position', posA );


    return geo;
    
  }
   function onMouseMove(event) {

        var vector = new THREE.Vector3();

        vector.set(
            ( event.clientX / window.innerWidth ) * 2 - 1,
            - ( event.clientY / window.innerHeight ) * 2 + 1,
            0.5 );

        vector.unproject( camera );

        var dir = vector.sub( camera.position ).normalize();

        var distance = - camera.position.z / dir.z;

        var pos = camera.position.clone().add( dir.multiplyScalar( distance ) );
        mouseX = pos.x
        mouseY = pos.y
        
    }

</script>

</body>
</html>
