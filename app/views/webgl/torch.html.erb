<!doctype html>
<html lang="en">
    <head>
        <title>Torches</title>
        <meta charset="utf-8">
    </head>

    <body>
        <div id="container"></div>
    </body>



    <script type="x-shader/x-vertex" id="vertexShader">
    vec3 mod289(vec3 x)
    {
      return x - floor(x * (1.0 / 289.0)) * 289.0;
    }

    vec4 mod289(vec4 x)
    {
      return x - floor(x * (1.0 / 289.0)) * 289.0;
    }

    vec4 permute(vec4 x)
    {
      return mod289(((x*34.0)+1.0)*x);
    }

    vec4 taylorInvSqrt(vec4 r)
    {
      return 1.79284291400159 - 0.85373472095314 * r;
    }

    vec3 fade(vec3 t) {
      return t*t*t*(t*(t*6.0-15.0)+10.0);
    }

    
    float pnoise(vec3 P, vec3 rep)
    {
      vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period
      vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period
      Pi0 = mod289(Pi0);
      Pi1 = mod289(Pi1);
      vec3 Pf0 = fract(P); // Fractional part for interpolation
      vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
      vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
      vec4 iy = vec4(Pi0.yy, Pi1.yy);
      vec4 iz0 = Pi0.zzzz;
      vec4 iz1 = Pi1.zzzz;

      vec4 ixy = permute(permute(ix) + iy);
      vec4 ixy0 = permute(ixy + iz0);
      vec4 ixy1 = permute(ixy + iz1);

      vec4 gx0 = ixy0 * (1.0 / 7.0);
      vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
      gx0 = fract(gx0);
      vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
      vec4 sz0 = step(gz0, vec4(0.0));
      gx0 -= sz0 * (step(0.0, gx0) - 0.5);
      gy0 -= sz0 * (step(0.0, gy0) - 0.5);

      vec4 gx1 = ixy1 * (1.0 / 7.0);
      vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
      gx1 = fract(gx1);
      vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
      vec4 sz1 = step(gz1, vec4(0.0));
      gx1 -= sz1 * (step(0.0, gx1) - 0.5);
      gy1 -= sz1 * (step(0.0, gy1) - 0.5);

      vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
      vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
      vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
      vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
      vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
      vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
      vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
      vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

      vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
      g000 *= norm0.x;
      g010 *= norm0.y;
      g100 *= norm0.z;
      g110 *= norm0.w;
      vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
      g001 *= norm1.x;
      g011 *= norm1.y;
      g101 *= norm1.z;
      g111 *= norm1.w;

      float n000 = dot(g000, Pf0);
      float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
      float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
      float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
      float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
      float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
      float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
      float n111 = dot(g111, Pf1);

      vec3 fade_xyz = fade(Pf0);
      vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
      vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
      float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
      return 2.2 * n_xyz;
    }
    //////////

        varying vec2 vUv;
        varying float noise;
        uniform float time;

        float turbulence( vec3 p ) {
            float w = 100.0;
            float t = -.5;
            for (float f = 1.0 ; f <= 10.0 ; f++ ){
                float power = pow( 2.0, f );
                t += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );
            }
            return t;
        }

        void main() {

            vUv = uv;

            // add time to the noise parameters so it's animated
            noise = 10.0 *  -.10 * turbulence( .5 * normal + time );
            float b = 5.0 * vUv[1] * pnoise( 0.05 * position + vec3( 2.0 * time ), vec3( 100.0 ) );
            float displacement = - noise + b;
            float bonus = 1.0;
            if(vUv[1]>0.5){
              bonus = 10.0;
            }
            vec3 newPosition = (position + normal * displacement  );
            newPosition[1] = newPosition[1] + bonus * vUv[1]* vUv[1]* vUv[1];
            gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );

        }
    </script>

    <script type="x-shader/x-vertex" id="fragmentShader">
        varying vec2 vUv;
        varying float noise;
        uniform sampler2D tExplosion;

        float random( vec3 scale, float seed ){
            return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed ) ;
        }

        void main() {

            // get a random offset
            float r = .01 * random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );
            // lookup vertically in the texture, using noise and offset
            // to get the right RGB colour
            vec2 tPos = vec2( 0, 0.6 - 1.2 * noise + r );
            vec4 color = texture2D( tExplosion, tPos );

            gl_FragColor = vec4( color.rgb, 1.0 );

        }
    </script>

    <script type="text/javascript" id="mainCode">
        var container, 
            renderer, 
            scene, 
            camera, 
            mesh, 
            start = Date.now(),
            fov = 30;
   
         $(document).ready(function(){

            // grab the container from the DOM
            container = document.getElementById( "container" );
            
            // create a scene
            scene = new THREE.Scene();

            // create a camera the size of the browser window
            // and place it 100 units away, looking towards the center of the scene
            camera = new THREE.PerspectiveCamera( 
                fov, 
                window.innerWidth / window.innerHeight, 
                1, 
                10000 );
            camera.position.z = 100;
            camera.target = new THREE.Vector3( 0, 0, 0 );

            scene.add( camera );

            // create a shader material      
            material = new THREE.ShaderMaterial( {
              uniforms: { 
                  tExplosion: { 
                      type: "t", 
                      value: THREE.ImageUtils.loadTexture( '/images/explosion.png' )
                  },
                  time: { // float initialized to 0
                      type: "f", 
                      value: 0.0 
                  }
              },
              vertexShader: document.getElementById( 'vertexShader' ).textContent,
              fragmentShader: document.getElementById( 'fragmentShader' ).textContent
            } );
            materialC = new THREE.MeshBasicMaterial({ map : THREE.ImageUtils.loadTexture( '/images/wood.jpg' ) })
            // create a sphere and assign the material

            mesh0 = new THREE.Mesh( 
                new THREE.IcosahedronGeometry( 5, 4 ), 
                material 
            );
            mesh0.position.x = -30
            mesh0.position.z = -40
            cyl0 = new THREE.Mesh(
              new THREE.CylinderGeometry(2,.5,16),
              materialC
              )
            cyl0.position.y = -10
            cyl0.position.x = -30
            cyl0.position.z = -40
            mesh1 = new THREE.Mesh( 
                new THREE.IcosahedronGeometry( 5, 4 ), 
                material 
            );
            mesh1.position.x = 30
            mesh1.position.z = -40
            cyl1 = new THREE.Mesh(
              new THREE.CylinderGeometry(2,.5,16),
              materialC
              )
            cyl1.position.y = -10
            cyl1.position.x = 30
            cyl1.position.z = -40
            ///
            mesh2 = new THREE.Mesh( 
                new THREE.IcosahedronGeometry( 5, 4 ), 
                material 
            );
            mesh2.position.x = 0
            mesh2.position.z = -40
            cyl2 = new THREE.Mesh(
              new THREE.CylinderGeometry(2,.5,16),
              materialC
              )
            cyl2.position.y = -10
            cyl2.position.x = 0
            cyl2.position.z = -40
            scene.add( mesh0 );
            scene.add(cyl0)
            scene.add( mesh1 );
            scene.add(cyl1)
            scene.add( mesh2 );
            scene.add(cyl2)
            var light = new THREE.PointLight( 0xff0000, 1, 70 );
            light.position.set( -30, 0, -40 );

            scene.add( light );
            var light2 = new THREE.PointLight( 0xff0000, 1, 70);
            light2.position.set( 30,0 , -40 );
            scene.add(light2)

            materialF = new THREE.MeshPhongMaterial(color = 0xffffff) 
            var floor = new THREE.Mesh(new THREE.PlaneGeometry(100,100), materialF)
            floor.rotation.x = Math.PI / -2;
            floor.position.y = -20
            floor.position.z = -50
            scene.add(floor)
            var ceil = new THREE.Mesh(new THREE.PlaneGeometry(100,100), materialF)
            ceil.rotation.x = Math.PI / 2;
            ceil.position.y = 30
            ceil.position.z = -50
            scene.add(ceil)
            var back = new THREE.Mesh(new THREE.PlaneGeometry(100,100), materialF)
            back.position.y = -20
            back.position.z = -100
            scene.add(back)
            var sider = new THREE.Mesh(new THREE.PlaneGeometry(100,100), materialF)
            sider.rotation.y = Math.PI / -2;
            sider.position.y = -20
            sider.position.z = -50
            sider.position.x = 0
            scene.add(sider)
            var sidel = new THREE.Mesh(new THREE.PlaneGeometry(100,100), materialF)
            sidel.rotation.y = Math.PI / 2;
            sidel.position.y = -20
            sidel.position.z = -50
            sidel.position.x = -0
            scene.add(sidel)

            // create the renderer and attach it to the DOM
            renderer = new THREE.WebGLRenderer();
            renderer.setSize( window.innerWidth, window.innerHeight );
            
            container.appendChild( renderer.domElement );

            render();

        } );

        function render() {
            time = .00025 * ( Date.now() - start );
          
            
            material.uniforms[ 'time' ].value = time
            // let there be light
            renderer.render( scene, camera );
            requestAnimationFrame( render );
            
        }
    </script>

</html>